<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[括号匹配]]></title>
    <url>%2F2018%2F10%2F19%2F%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%2F</url>
    <content type="text"><![CDATA[在编写代码的时候，经常会用到两种括号：圆括号 “()” 和大括号 “{}” 。不管使用哪种括号，程序编译没有问题的其中一个重要因素就是所使用的括号是否能够匹配上. 在编写程序时，括号可以嵌套，即： “({()})” 这种形式，但 “({)” 或者 “({}” 都不符合要求。 括号匹配项目要求：给出任意搭配的括号，判断是否匹配。 设计思路编写程序判断括号匹配问题的时候，使用栈结构会很容易： 如果碰到的是左圆括号或者左大括号，直接压栈；如果碰到的是右圆括号或者右大括号，就直接和栈顶元素配对：如果匹配，栈顶元素弹栈；反之，括号不匹配； 实现代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;stdio.h&gt;#include &lt;string.h&gt;int top=-1;//top变量时刻表示栈顶元素所在位置void push(char * a,int elem)&#123; a[++top]=elem;&#125;void pop(char* a)&#123; if (top==-1) &#123; return ; &#125; top--;&#125;char visit(char * a)&#123; //调取栈顶元素，不等于弹栈，如果栈为空，为使程序不发生错误，返回空字符 if (top!=-1) &#123; return a[top]; &#125;else&#123; return &apos; &apos;; &#125;&#125;int main() &#123; char a[30]; char bracket[100]; printf(&quot;请输入括号序列：&quot;); scanf(&quot;%s&quot;,bracket); getchar(); int length=(int)strlen(bracket); for (int i=0; i&lt;length; i++) &#123; //如果是左括号，直接压栈 if (bracket[i]==&apos;(&apos;||bracket[i]==&apos;&#123;&apos;) &#123; push(a, bracket[i]); &#125;else&#123; //如果是右边括号，判断与栈顶元素是否匹配，如果匹配，栈顶元素弹栈，程序继续运行；否则，发现括号不匹配，输出结果直接退出 if (bracket[i]==&apos;)&apos;) &#123; if (visit(a)==&apos;(&apos;) &#123; pop(a); &#125;else&#123; printf(&quot;括号不匹配&quot;); return 0; &#125; &#125;else&#123; if (visit(a)==&apos;&#123;&apos;) &#123; pop(a); &#125;else&#123; printf(&quot;括号不匹配&quot;); return 0; &#125; &#125; &#125; &#125; //如果所有括号匹配完成，栈内为空，说明所有括号全部匹配成功 if (top!=-1) &#123; printf(&quot;括号不匹配&quot;); &#125;else&#123; printf(&quot;括号匹配&quot;); &#125;&#125; 运行结果请输入括号序列：{}(){ 括号不匹配]]></content>
  </entry>
  <entry>
    <title><![CDATA[CTF的常见write up]]></title>
    <url>%2F2018%2F10%2F12%2FCTF%2F</url>
    <content type="text"><![CDATA[本文总结了CTF中我所遇到的题型及其write up，本文长期更新 希望各位多多评论指正，也算作对我第一次写技术文章的鼓励！ 训练场：南京邮电大学CTF题库 直接查看源码出现场景：一般出现在第一题 分值指数：⭐ write up： 直接Ctrl+u查看网页源码寻找flag 修改maxlength出现场景：输入框输入内容有位数限制 分值指数：⭐ write up：F12进入开发者模式修改maxlength后提交 PHP特性介绍：PHP在处理哈希字符串时，会利用“!=”或“==”来对哈希值进行比较，它把每一个以”0e”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以“0e”开头的，那么PHP将会认为他们相同，都是0 出现场景：PHP代码审计、含md5的题 分值指数：⭐⭐ write up： 修复方法：“===”和“!==”strict比较符，只有在类型相同时才相等。“==”和“!=”即non-strict比较符，会在类型转换后进行比较 扩展：0e开头MD5值小结 s878926199a 0e545993274517709034328855841020 s155964671a 0e342768416822451524974117254469 s214587387a 0e848240448830537924465865611904 图片隐写出现场景： 分值指数： 脑洞题 源码找url 源码看flag jjencode/aaencode（颜文字）介绍： 什么是jjencode? 将js代码转换成只有符号的字符串 什么是aaencode？ 将js代码转换成常用的网络表情 aaencode加密：http://utf-8.jp/public/aaencode.html 解密方法：可以直接利用浏览器的控制台输入密文，执行后即可解密。 文件包含漏洞典型的文件包含漏洞的格式网址：php?file=xxx.php 原因：网页后端php（或其他）代码中使用了include等文件包含语句，而且所包含的文件由变量控制，恰恰此变量又能通过GET或POST等方式进行修改所造成的 headermysql 精度问题 intval（）这个函数的作用是把参数自动转换成整数（int） $id = intval(1024.5)//结果为$id==1024 robots.txt介绍：robots.txt是搜索引擎中访问网站的时候要查看的第一个文件，robots.txt文件告诉了蜘蛛程序在服务器上什么文件是可以被查的。 GBK宽字节编码漏洞介绍：php中MYSQL数据库,如果是GBK编码.一定要小心GBK宽字节编码漏洞正常情况下 magic_quote_gpc 为ON,如果输入 http://www.xxxx.com/index.php?user=11′ and 1=2 # SQL语句就会变成 SELECT * FROM user WHERE user=’1\’ and 1=2 #’ 自动加上了\转义，如果构造特殊的宽字节编码呢？ http://www.xxxx.com/index.php?user=11%df%27 and 1=2 # SQL语句就变成 SELECT * FROM user WHERE user=’11運’ and 1=2#’ 这样就注入上了！ 11%df会被解析成“11運”,而“%27”被邪恶的解析成’就绕过了gpc转义,就成功构造注入了 未完待续。。。]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
</search>
